from aiogram import types, F, Router
from aiogram.enums import ChatAction
from aiogram.filters import Command
from aiogram.types import Message

from app.handlers.admin.start_admin import admin_start
from app.templates.keyboard.button import start_keyboard
from app.templates.keyboard.inline import start_menu, menu_buttons
from app.templates.text.user import instructions
import random
from datetime import datetime
import aiohttp
from app.database.database import SessionLocal
from app.database.requests.crud import add_or_update_user, get_all_user_ids, find_public_ids
from app.handlers.admin.channels import generate_pub
from app.database.requests.crud import show_admins

router = Router()


@router.message(Command("start"))
async def protect(message: types.Message):
    db = SessionLocal()
    user_ids = get_all_user_ids(db)
    if message.from_user.id not in user_ids:
        try:
            db = SessionLocal()
            add_or_update_user(db=db, user_id=message.from_user.id, username=message.from_user.username)
        except Exception as e:
            print(e)
        finally:
            db.close()
    else:
        pass

    db = SessionLocal()
    admins = show_admins(db=db)

    if message.from_user.id not in admins:
        num1 = random.randint(1, 11)
        num2 = random.randint(1, 11)
        correct_answer = num1 + num2
        buttons = [
            types.InlineKeyboardButton(text=str(random.randint(2, 21)), callback_data='num_1'),
            types.InlineKeyboardButton(text=str(random.randint(2, 21)), callback_data='num_2'),
            types.InlineKeyboardButton(text=str(random.randint(2, 21)), callback_data='num_3'),
        ]

        correct_position = random.randint(0, len(buttons))

        buttons.insert(correct_position, types.InlineKeyboardButton(text=str(correct_answer), callback_data="correct"))

        protect_buttons = [buttons]

        reply_markup = types.InlineKeyboardMarkup(inline_keyboard=protect_buttons)
        await message.answer(text=f"üõ° –î–ª—è –∑–∞–ø—É—Å–∫–∞, –Ω–∞–¥–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {num1} + {num2}?",
                             reply_markup=reply_markup)

    else:
        return await admin_start(message)


@router.callback_query(F.data == "correct")
async def start(callback: types.CallbackQuery):
    db = SessionLocal()
    public_ids = find_public_ids(db)
    db.close()

    user_id = callback.from_user.id
    sub = True

    for chat_id in public_ids:
        try:
            status = await callback.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            if status.status not in ['creator', 'administrator', 'member']:
                sub = False
                break
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –ø–∞–±–ª–∏–∫ {chat_id}: {e}")
            sub = False
            break

    if not sub:
        return await generate_pub(callback)
    else:
        await callback.message.delete()
        keyboard = types.ReplyKeyboardMarkup(keyboard=start_keyboard, resize_keyboard=True, one_time_keyboard=True)
        buttons = types.InlineKeyboardMarkup(inline_keyboard=start_menu)
        await callback.message.answer("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üëçÔ∏è", reply_markup=keyboard)
        await callback.message.answer('üçø –ü—Ä–∏–≤–µ—Ç, –∫–∏–Ω–æ–º–∞–Ω!\n\n'
                                      'üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–Ω–µ',
                                      reply_markup=buttons)


@router.callback_query(F.data == "check_me")
async def check_me(callback: types.CallbackQuery):
    return await start(callback)


@router.callback_query(F.data == "instruction")
async def instruction(callback: types.CallbackQuery):
    await callback.message.answer(text=instructions)


@router.callback_query(F.data == "video_guide")
async def video_guide(callback: types.CallbackQuery):
    await callback.message.bot.send_chat_action(
        chat_id=callback.message.chat.id,
        action=ChatAction.UPLOAD_VIDEO
    )
    url = "https://drive.google.com/uc?export=download&id=1MnruCvqhOgK6rhUlkQQnoqnf_qqAXj5Z"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            result_bytes = await response.read()

    await (callback.message.bot.send_video
           (chat_id=callback.message.chat.id,
            video=types.BufferedInputFile(
                file=result_bytes,
                filename="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.mp4"),
            has_spoiler=True))


@router.message(F.text.lower() == "üìñ –º–µ–Ω—é" or F.data == "menu")
async def menu(message: Message):
    buttons_menu = types.InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    date = datetime.now().strftime('%d.%m.%Y %H:%M')
    await message.answer(f"üÜî {message.from_user.id}\nüïî –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {date}\n\nüçø "
                         f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! üçø", reply_markup=buttons_menu)


@router.callback_query(F.data.in_({"num_1", "num_2", "num_3"}))
async def back(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
    return await protect(callback.message)


@router.message(F.text.lower() == "‚öôÔ∏è —Ñ–∏–ª—å—Ç—Ä")
async def filters(message: Message):
    await message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")





@router.callback_query(F.data == "favorites")
async def video_guide_callback_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–ß–µ —Ç—ã–∫–∞–µ—à—å –Ω–∞ –Ω–µ—Ä–∞–±–æ—á–∏–µ –∫–Ω–æ–ø–∫–∏?')


@router.callback_query(F.data == "random")
async def video_guide_callback_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('.')


@router.callback_query(F.data == "filter")
async def video_guide_callback_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–¢—ã –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—à—å...')


@router.callback_query(F.data == "promo")
async def video_guide_callback_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–í–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ 1.000.000$: JHD8234HUIRH0897HUDFS832')


@router.callback_query(F.data == "share")
async def video_guide_callback_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–û—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ–æ—Ç–æ –¥–ª—è —Å–ª—É–∂–± –§–°–ë. –î–æ–∂–∏–¥–∞–π—Ç–µ—Å—å –ø—Ä–æ–≤–µ—Ä–∫–∏...')


@router.callback_query(F.data == "vip_info")
async def video_guide_callback_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–†–æ—Å—Å–∏—è –Ω–µ –¥–ª—è VIP\n–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã ):')


@router.callback_query(F.data == "support")
async def video_guide_callback_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–í—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π!')


@router.callback_query(F.data == "search")
async def search_callback_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer('–ò–¥—ë—Ç –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö —à–ª—è—Ä–≤ –≥. –ê–ª–∑–∞–º–∞–π, —É–ª. –í–æ–∫–∑–∞–ª—å–Ω–∞—è')


@router.callback_query(F.data == "menu")
async def menu_callback_handler(callback: types.CallbackQuery):
    buttons_menu = types.InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    date = datetime.now().strftime('%d.%m.%Y %H:%M')
    await callback.message.answer(f"üÜî {callback.from_user.id}\nüïî –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {date}\n\nüçø"
                                  f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! üçø", reply_markup=buttons_menu)

