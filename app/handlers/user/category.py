import random
import aioredis
import aiohttp
from aiogram import F, types, Router
from aiogram.types import InlineKeyboardMarkup, CallbackQuery

from app.templates.keyboard.inline import catygory
from app.utils.model import KinopoiskCategory, Category, CategoryFilm, CategorySerial
from aiogram.exceptions import TelegramBadRequest


category_router = Router()


@category_router.callback_query(F.data == "random_film")
async def random_film(callback: types.CallbackQuery):
    await callback.message.delete()

    movie_data = await KinopoiskCategory.kinopoisk_api(
        url="https://kinobox.tv/api/films/popular"
    )

    if not isinstance(movie_data, list) or not movie_data:
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å
    current_index = random.randint(0, len(movie_data) - 1)
    movie = movie_data[current_index]

    id = movie.get('id', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    name = movie.get('title', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    year = movie.get('year', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
    rating = str(movie.get('rating', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'))
    poster = movie.get('posterUrl', None)

    kew = [
        [
            types.InlineKeyboardButton(text="‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å", callback_data="random_film")
        ],
        [
            types.InlineKeyboardButton(text='üé¨ –°–º–æ—Ç—Ä–µ—Ç—å', switch_inline_query_current_chat=f"kp{id}"),
            types.InlineKeyboardButton(text='üëà –í –º–µ–Ω—é', callback_data='back_user_go')
        ]
    ]
    d = InlineKeyboardMarkup(inline_keyboard=kew)

    await callback.message.answer_photo(photo=poster,
                                        caption=f"üìΩÔ∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}, {year}\n\n–†–µ–π—Ç–∏–Ω–≥: {rating}",
                                        reply_markup=d)


@category_router.callback_query(F.data == "category")
async def catygoryes(callback: CallbackQuery):
    await callback.message.delete()
    r = InlineKeyboardMarkup(inline_keyboard=catygory)
    await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üëá", reply_markup=r)


user_last_anime_index = {}

@category_router.callback_query(F.data == "random_anime")
async def random_anime(callback: types.CallbackQuery):
    await callback.message.delete()
    type = 'anime'
    user_id = callback.from_user.id
    if user_id not in user_last_anime_index:
        user_last_anime_index[user_id] = -1

    url = 'https://api.kinopoisk.dev/v1.4/movie?page=1&limit=100&type=anime'
    data = await Category.kinopoisk_search(url=url, types=type)
    anime_data = data.get('docs', [])
    if not anime_data:
        await callback.message.answer("–ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    while True:
        user_last_anime_index[user_id] += 1
        current_index = user_last_anime_index[user_id] % len(anime_data)
        if user_last_anime_index[user_id] - len(anime_data) > 0:
            await callback.message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã –≤—Å–µ –∞–Ω–∏–º–µ.")
            break

        anime = anime_data[current_index]
        id = anime.get('id', 'ID –Ω–µ —É–∫–∞–∑–∞–Ω')
        name = anime.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        year = anime.get('year', '–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')
        altname = anime.get('alternativeName', '') or ('–ê–Ω–∏–º–µ')
        details = anime.get('description', '–û–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç')
        rating_kp = str(anime.get('rating', {}).get('kp', '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω'))
        poster = anime.get('poster', {}).get('url', None)

        caption = (f"üé¨ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name} ({altname}), {year}\n\n"
                   f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥ –ö–ü:</b> {rating_kp}\n\n"
                   f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {details}")

        anime_menu = [
            [types.InlineKeyboardButton(text="‚ôªÔ∏è –î–∞–ª–µ–µ", callback_data="random_anime")],
            [types.InlineKeyboardButton(text='üé¨ –°–º–æ—Ç—Ä–µ—Ç—å', switch_inline_query_current_chat=f"kp{id}"),
             types.InlineKeyboardButton(text='üëà –í –º–µ–Ω—é', callback_data='back_user_go')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=anime_menu)

        try:
            await callback.message.answer_photo(
                photo=poster,
                caption=caption,
                reply_markup=reply_markup
            )
            break  # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        except TelegramBadRequest as e:
            if "wrong type of the web page content" in str(e):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
            else:
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                break


user_last_film_index = {}

@category_router.callback_query(F.data == "random_films")
async def random_films(callback: types.CallbackQuery):
    await callback.message.delete()
    type = 'film'
    user_id = callback.from_user.id
    if user_id not in user_last_film_index:
        user_last_film_index[user_id] = -1

    url = 'https://api.kinopoisk.dev/v1.4/movie?page=1&limit=50&type=movie&lists=top250'
    data = await CategoryFilm.kinopoisk_search(url=url, types=type)
    film_data = data.get('docs', [])
    if not film_data:
        await callback.message.answer("–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    while True:
        user_last_film_index[user_id] += 1
        current_index = user_last_film_index[user_id] % len(film_data)
        if user_last_film_index[user_id] - len(film_data) > 0:
            await callback.message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã –≤—Å–µ —Ñ–∏–ª—å–º—ã.")
            break

        film = film_data[current_index]
        id = film.get('id', 'ID –Ω–µ —É–∫–∞–∑–∞–Ω')
        name = film.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        year = film.get('year', '–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')
        altname = film.get('alternativeName', '') or ('–§–∏–ª—å–º')
        details = film.get('description', '–û–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç')
        rating_kp = str(film.get('rating', {}).get('kp', '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω'))
        poster = film.get('poster', {}).get('url', None)

        caption = (f"üé¨ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name} ({altname}), {year}\n\n"
                   f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥ –ö–ü:</b> {rating_kp}\n\n"
                   f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {details}")

        film_menu = [
            [types.InlineKeyboardButton(text="‚ôªÔ∏è –î–∞–ª–µ–µ", callback_data="random_films")],
            [types.InlineKeyboardButton(text='üé¨ –°–º–æ—Ç—Ä–µ—Ç—å', switch_inline_query_current_chat=f"kp{id}"),
             types.InlineKeyboardButton(text='üëà –í –º–µ–Ω—é', callback_data='back_user_go')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=film_menu)

        try:
            await callback.message.answer_photo(
                photo=poster,
                caption=caption,
                reply_markup=reply_markup
            )
            break
        except TelegramBadRequest as e:
            if "wrong type of the web page content" in str(e):
                continue
            else:
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                break


user_last_serial_index = {}


@category_router.callback_query(F.data == "random_serial")
async def random_serial(callback: types.CallbackQuery):
    await callback.message.delete()
    type = 'serial'
    user_id = callback.from_user.id
    if user_id not in user_last_serial_index:
        user_last_serial_index[user_id] = -1

    url = 'https://api.kinopoisk.dev/v1.4/movie?page=1&limit=50&type=tv-series&lists=series-top250'
    data = await CategorySerial.kinopoisk_search(url=url, types=type)
    serial_data = data.get('docs', [])
    if not serial_data:
        await callback.message.answer("–°–µ—Ä–∏–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    while True:
        user_last_serial_index[user_id] += 1
        current_index = user_last_serial_index[user_id] % len(serial_data)
        if user_last_serial_index[user_id] - len(serial_data) > 0:
            await callback.message.answer("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã –≤—Å–µ —Å–µ—Ä–∏–∞–ª—ã.")
            break

        serial = serial_data[current_index]
        id = serial.get('id', 'ID –Ω–µ —É–∫–∞–∑–∞–Ω')
        name = serial.get('name', '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
        year = serial.get('year', '–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω')
        altname = serial.get('alternativeName', '') or ('–°–µ—Ä–∏–∞–ª')
        details = serial.get('description', '–û–ø–∏—Å–∞–Ω–∏—è –Ω–µ—Ç')
        rating_kp = str(serial.get('rating', {}).get('kp', '–†–µ–π—Ç–∏–Ω–≥ –Ω–µ —É–∫–∞–∑–∞–Ω'))
        poster = serial.get('poster', {}).get('url', None)

        caption = (f"üé¨ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name} ({altname}), {year}\n\n"
                   f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥ –ö–ü:</b> {rating_kp}\n\n"
                   f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {details}")

        serial_menu = [
            [types.InlineKeyboardButton(text="‚ôªÔ∏è –î–∞–ª–µ–µ", callback_data="random_serial")],
            [types.InlineKeyboardButton(text='üé¨ –°–º–æ—Ç—Ä–µ—Ç—å', switch_inline_query_current_chat=f"kp{id}"),
             types.InlineKeyboardButton(text='üëà –í –º–µ–Ω—é', callback_data='back_user_go')]
        ]
        reply_markup = InlineKeyboardMarkup(inline_keyboard=serial_menu)

        try:
            await callback.message.answer_photo(
                photo=poster,
                caption=caption,
                reply_markup=reply_markup
            )
            break
        except TelegramBadRequest as e:
            if "wrong type of the web page content" in str(e):
                continue
            else:
                await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
                break