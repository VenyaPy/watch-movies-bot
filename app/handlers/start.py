from aiogram import Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from app.keyboard.button import start_keyboard
from app.keyboard.inline import start_menu, menu_buttons
import random


dp = Dispatcher()




@dp.message(Command("start"))
async def protect(message: types.Message) -> None:
    num1 = random.randint(1, 11)
    num2 = random.randint(1, 11)
    correct_answer = num1 + num2
    buttons = [
        types.InlineKeyboardButton(text=str(random.randint(2, 21)), callback_data='numone'),
        types.InlineKeyboardButton(text=str(random.randint(2, 21)), callback_data='numtwo'),
        types.InlineKeyboardButton(text=str(random.randint(2, 21)), callback_data='numthree'),
    ]

    correct_position = random.randint(0, len(buttons))

    buttons.insert(correct_position, types.InlineKeyboardButton(text=str(correct_answer), callback_data="correct"))

    protect_buttons = [buttons]

    reply_markup = types.InlineKeyboardMarkup(inline_keyboard=protect_buttons)
    await message.answer(text=f"üõ° –î–ª—è –∑–∞–ø—É—Å–∫–∞, –Ω–∞–¥–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {num1} + {num2}?",
                         reply_markup=reply_markup)


@dp.callback_query(F.data == "correct")
async def start(callback: types.CallbackQuery):
    await callback.message.delete()
    keyboard = types.ReplyKeyboardMarkup(keyboard=start_keyboard, resize_keyboard=True)
    buttons = types.InlineKeyboardMarkup(inline_keyboard=start_menu)
    await callback.message.answer("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω üëçÔ∏è", reply_markup=keyboard)
    await callback.message.answer('üçø –ü—Ä–∏–≤–µ—Ç, –∫–∏–Ω–æ–º–∞–Ω!\n\n'
                                  'üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–Ω–µ',
                                  reply_markup=buttons)


@dp.message(F.text.lower() == "üìñ –º–µ–Ω—é")
async def menu(message: Message):
    buttons_menu = types.InlineKeyboardMarkup(inline_keyboard=menu_buttons)
    await message.answer(f"üÜî {message.from_user.id}\nüïî –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ 23.02.24 20:43\n\nüçø "
                         f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! üçø", reply_markup=buttons_menu)


@dp.callback_query(lambda f: f.data in ["numone", "numtwo", "numthree"])
async def back(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!")
    return await protect(callback.message)


@dp.message(F.text.lower() == "‚öôÔ∏è —Ñ–∏–ª—å—Ç—Ä")
async def filters(message: Message):
    await message.answer("–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")


@dp.callback_query(F.data == "video_guide")
async def video_guide_callback_handler(callback: types.CallbackQuery):
    await callback.message.answer('–ü—Ä–∏–Ω—è—Ç–æ')


@dp.callback_query(F.data == "menu")
async def menu_callback_handler(callback: types.CallbackQuery):
    await callback.message.answer('–ü—Ä–∏–Ω—è—Ç–æ')


@dp.callback_query(F.data == "search")
async def search_callback_handler(callback: types.CallbackQuery):
    await callback.message.answer('–ü—Ä–∏–Ω—è—Ç–æ')
