from aiogram import Router
from aiogram.types import InlineKeyboardMarkup
from aiogram import types
import aiohttp
from uuid import uuid4
import re
from app.templates.text.user import instructions_b
from app.templates.keyboard.inline import again
from config import api_hbtv
from app.utils.model import KinopoiskCategory
from urllib.parse import urlparse

cdn_rou = Router()


async def fetch_movies(query):
    try:
        kp_link_match = re.match(r'https?://www\.kinopoisk\.ru/(series|film)/(\d+)', query)
        if kp_link_match:
            kp_id = kp_link_match.group(2)
            url = f"https://apivb.info/api/videos.json?id_kp={kp_id}&token={api_hbtv}"
        else:
            kp_match = re.match(r'kp(\d+)', query)
            if kp_match:
                kp_id = kp_match.group(1)
                url = f"https://apivb.info/api/videos.json?id_kp={kp_id}&token={api_hbtv}"
            else:
                url = f"https://apivb.info/api/videos.json?title={query}&token={api_hbtv}"

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status == 200:
                    movies = await response.json(content_type=None)
                    return movies
        return []
    except Exception as e:
        print(e)
        return []


def is_valid_url(url):
    try:
        result = urlparse(url)
        return all([result.scheme, result.netloc])
    except ValueError:
        return False


default_poster = "app/photo.png"


@cdn_rou.inline_query()
async def inline_query(inline: types.InlineQuery):
    query = inline.query.strip()

    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞
    if len(query) < 3:
        await inline.answer([], cache_time=1, is_personal=True)
        return

    response = await fetch_movies(query)
    results = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–∏–ª—å–º—ã –≤ –æ—Ç–≤–µ—Ç–µ
    if isinstance(response, list):
        films = response[:50]
    elif isinstance(response, dict):
        films = response.get('data', [])[:50]
    else:
        films = []

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    for film in films:
        film_id = film.get("kinopoisk_id")
        title = film.get('title_ru') or film.get('title_en')
        year = film.get('year', '')
        trailer_url = film.get('trailer', '')

        movie = await KinopoiskCategory.kinopoisk_search(id=film_id)
        quality = movie.get('ratingKinopoisk')
        poster = movie.get('posterUrlPreview') or movie.get('posterUrl') or film.get('poster', '').replace('\\/', '/')
        poster = poster if is_valid_url(poster) else default_poster

        about = movie.get('description', '')

        shortDescription = movie.get('shortDescription', '') or movie.get('description', '')

        genres_list = movie.get('genres', [])
        genres = ', '.join([genre['genre'] for genre in genres_list])

        countries_list = movie.get('countries', [])
        countries = ', '.join([country['country'] for country in countries_list])

        my_site_url = f"https://kinowild.ru/player?{film_id}"

        unique_id = str(uuid4())

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ñ–∏–ª—å–º–∞
        keyboard_buttons = [
            [types.InlineKeyboardButton(text="ü§ó –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", url=my_site_url)]
        ]

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Ç—Ä–µ–π–ª–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        if trailer_url:
            keyboard_buttons.insert(1, [types.InlineKeyboardButton(text="üé¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–µ–π–ª–µ—Ä", url=trailer_url)])

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ –∫–Ω–æ–ø–æ–∫
        keyboard_buttons.append(
            [types.InlineKeyboardButton(text='‚ôªÔ∏è –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫', switch_inline_query_current_chat=""),
             types.InlineKeyboardButton(text='üëà –í –º–µ–Ω—é', callback_data='back_user_now')])

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–∏—Å–∫–∞
        result_text = types.InputTextMessageContent(
            message_text=(
                f"üé¨ <b>{title}</b> ({film.get('title_en')})\n\n"
                f"üóì <b>–ì–æ–¥ –≤—ã—Ö–æ–¥–∞:</b> {year}\n"
                f"üåç <b>–°—Ç—Ä–∞–Ω–∞:</b> {countries}\n"
                f"üåü <b>–†–µ–π—Ç–∏–Ω–≥:</b> {quality}\n"
                f"üé≠ <b>–ñ–∞–Ω—Ä—ã:</b> {genres}\n\n"
                f"üîé <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{about}\n\n"
                f"‚ö†Ô∏è –û—Ç–∫–ª—é—á–∏—Ç–µ VPN –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!\n\n"
                f"üçø –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞! üçø"
            ))

        results.append(types.InlineQueryResultArticle(
            id=unique_id,
            title=title,
            input_message_content=result_text,
            description=shortDescription,
            thumbnail_url=poster,
            reply_markup=keyboard,
        ))

    if not films:
        unique_id = str(uuid4())

        ag_but = InlineKeyboardMarkup(inline_keyboard=again)

        results.append(types.InlineQueryResultArticle(
            id=unique_id,
            title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã ü´£",
            input_message_content=types.InputTextMessageContent(message_text=instructions_b),
            description="–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ—á–µ–º—É",
            reply_markup=ag_but
        ))

    await inline.answer(results, cache_time=1, is_personal=True)
